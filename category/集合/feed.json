{
    "version": "https://jsonfeed.org/version/1",
    "title": "杰克飞的博客 • All posts by \"集合\" category",
    "description": "一个用Hexo搭建的个人博客",
    "home_page_url": "https://120115.xyz",
    "items": [
        {
            "id": "https://120115.xyz/2025/07/19/%E8%AE%B2%E4%B8%80%E8%AE%B2HashMap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/",
            "url": "https://120115.xyz/2025/07/19/%E8%AE%B2%E4%B8%80%E8%AE%B2HashMap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/",
            "title": "讲一讲HashMap的扩容机制",
            "date_published": "2025-07-19T08:28:05.350Z",
            "content_html": "<p>摘要：<br>HashMap 在元素个数超过阈值时会触发扩容（resize）操作，这个阈值是数组容量 * 负载因子。扩容的过程包括新数组创建和元素迁移。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br>当哈希表中元素个数超过阈值时会触发扩容 resize 方法，这个阈值是 数组容量 * 负载因子，数组容量初始是16，负载因子默认是0.75。</p>\n<p>扩容时：</p>\n<ol>\n<li><strong>创建一个新数组</strong>，容量为旧数组的2倍，具体是将旧容量左移1位得到新容量。</li>\n<li><strong>迁移元素</strong>，遍历旧数组的每个槽位，重新计算索引后放到新数组。如果槽位是单个节点，通过 <code>e.hash &amp; (newCap新容量 - 1)</code> 计算新索引；如果是红黑树节点，拆分处理。如果是链表节点，将链表拆分为<strong>低位链</strong>和<strong>高位链</strong>，避免重新哈希带来性能损耗。如果 <code>e.hash &amp; oldCap == 0</code>（元素哈希值与上旧容量等于0）就是低位链，索引不变。如果不为0，就是高位链，索引变成 旧索引 + 旧容量。</li>\n</ol>\n<p>通过这种方式，HashMap 能够高效地完成扩容和数据迁移，保证查询和插入的性能。</p>\n",
            "tags": [
                "HashMap",
                "扩容"
            ]
        }
    ]
}
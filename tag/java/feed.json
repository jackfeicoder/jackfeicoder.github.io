{
    "version": "https://jsonfeed.org/version/1",
    "title": "杰克飞的博客 • All posts by \"java\" tag",
    "description": "一个用Hexo搭建的个人博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/07/21/LangChain4j%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B-Java%E5%BC%80%E5%8F%91AI%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A4%AA%E7%88%BD%E4%BA%86%EF%BC%81/",
            "url": "http://example.com/2024/07/21/LangChain4j%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B-Java%E5%BC%80%E5%8F%91AI%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%A4%AA%E7%88%BD%E4%BA%86%EF%BC%81/",
            "title": "LangChain4j实战教程-Java开发AI项目，太爽了！",
            "date_published": "2024-07-21T04:00:00.000Z",
            "content_html": "<p>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvN2NOaDduZGVpV2lIQmpua1Rrel9aZw==\">https://mp.weixin.qq.com/s/7cNh7ndeiWiHBjnkTkz_Zg</span><br>大家好，我是程序员鱼皮。现在 AI 应用开发可以说是程序员必备的技能了，求职时能够大幅增加竞争力。之前我用 Spring AI 带大家做过一个开源的 AI 超级智能体项目，这次我来带大家快速掌握另一个主流的 Java AI 应用开发框架 LangChain4j。</p>\n<p>这个教程也是我精心设计，拒绝枯燥的理论，而是用一个编程小助手项目带大家在实战中依次学习 LangChain 几乎所有主流的用法和特性。看完这个教程，你不仅学会了 LangChain，还直接多了一段项目经历，岂不美哉？</p>\n<p>文章近一万字，有点长，建议收藏，观看视频版体验更佳~</p>\n<p>完整视频教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaWxpYmlsaS5jb20vdmlkZW8vQlYxWDRHR3ppRXly\">https://bilibili.com/video/BV1X4GGziEyr</span></p>\n<p>项目代码开源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpeXVwaS9haS1jb2RlLWhlbHBlcg==\">https://github.com/liyupi/ai-code-helper</span></p>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>我们要实现一个 AI 编程小助手，可以帮助用户答疑解惑，并且给出编程学习的指导建议，比如：</p>\n<ul>\n<li>编程学习路线</li>\n<li>项目学习建议</li>\n<li>程序员求职指南</li>\n<li>程序员常见面试题</li>\n</ul>\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYK5rVrxmRUf1ibzQR638JNlQtvia8yfz6ukkFwsZHhnHfnV7ia4LnanElUoS68nR5ichlZbHQyty9HVwQ/640?wx_fmt=png&from=appmsg&randomid=als75bj1&tp=webp&wxfrom=5&wx_lazy=1\" />\n\n<p>要实现这个需求，我们首先要能够调用 AI 完成基础对话，而且要支持实现多轮对话记忆。此外，如果想进一步增强 AI 的能力，需要让它能够使用工具来联网搜索内容；还可以让 AI 基于我们自己的知识库回答，给用户提供我们在编程领域沉淀的资源和经验。</p>\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYK5rVrxmRUf1ibzQR638JNlQel4e7wMeljibTCub9ELadNwqIHHMDvxglnibHhEZNThZqXcNTaYHXMPg/640?wx_fmt=png&from=appmsg&randomid=7m9qg0cr&tp=webp&wxfrom=5&wx_lazy=1\" />\n\n<p>如果要从 0 开始实现上述功能，还是很麻烦的，因此我们要使用 AI 开发框架来提高效率。</p>\n<h2 id=\"什么是-LangChain4j？\"><a href=\"#什么是-LangChain4j？\" class=\"headerlink\" title=\"什么是 LangChain4j？\"></a>什么是 LangChain4j？</h2><p>目前主流的 Java AI 开发框架有 Spring AI 和 LangChain4j，它们都提供了很多开箱即用的 API 来帮你调用大模型、实现 AI 开发常用的功能，比如我们今天要学的：</p>\n<ul>\n<li>对话记忆</li>\n<li>结构化输出</li>\n<li>RAG 知识库</li>\n<li>工具调用</li>\n<li>MCP</li>\n<li>SSE 流式输出</li>\n</ul>\n<p>就我个人体验下来，这两个框架的很多概念和用法都是类似的，也都提供了很多插件扩展，都支持和 Spring Boot 项目集成。虽然有一些编码上的区别，但孰好孰坏，使用感受也是因人而异的。</p>\n<p>实际开发中应该如何选择呢？</p>\n<p>我想先带你用 LangChain4j 开发完一个项目，最后再揭晓答案，因为那个时候你自己也会有一些想法。</p>\n<h2 id=\"AI-应用开发\"><a href=\"#AI-应用开发\" class=\"headerlink\" title=\"AI 应用开发\"></a>AI 应用开发</h2><h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p>打开 IDEA 开发工具，新建一个 Spring Boot 项目，Java 版本选择 21（因为 LangChain4j 最低支持 17 版本）：</p>\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYK5rVrxmRUf1ibzQR638JNlQycl5RYAlTBorwbTI3PlIicqz4qgYAfF5VA8ZD6OqdOQfaqPsxMgr9ag/640?wx_fmt=png&from=appmsg&randomid=cdah2fh9&tp=webp&wxfrom=5&wx_lazy=1\" />\n\n<p>选择依赖，使用 3.5.x 版本的 Spring Boot，引入 Spring MVC 和 Lombok 注解库：</p>\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYK5rVrxmRUf1ibzQR638JNlQduuBrs4ibuHF2kGDvHeJjOYtYAFt8OyjpYjChNIGq6MRPe1AtrNprAg/640?wx_fmt=png&from=appmsg&randomid=g2rzqtq4&tp=webp&wxfrom=5&wx_lazy=1\" />\n\n<p>新建项目后，先修改配置文件后缀为 yml，便于后面填写配置。</p>\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYK5rVrxmRUf1ibzQR638JNlQibWyATuY1jEMNX4NBNtXws0s68icNdRQM6w7ZdiaBuUXDuyVoclxAP6Fw/640?wx_fmt=png&from=appmsg&randomid=8glbb5o8&tp=webp&wxfrom=5&wx_lazy=1\" />\n\n<p>这里我会建议大家创建一个 application-local.yml 配置文件，将开发时用到的敏感配置写到这里，并且添加到 .gitignore 中，防止不小心开源出来。</p>\n<h2 id=\"AI-对话-ChatModel\"><a href=\"#AI-对话-ChatModel\" class=\"headerlink\" title=\"AI 对话 - ChatModel\"></a>AI 对话 - ChatModel</h2><p>ChatModel 是最基础的概念，负责和 AI 大模型交互。</p>\n<p>首先需要引入至少一个 AI 大模型依赖，这里选择国内的阿里云大模型，提供了和 Spring Boot 项目的整合依赖包，比较方便：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>dev.langchain4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>langchain4j-community-dashscope-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-beta7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要到 阿里云百炼平台 获取大模型调用 key，注意不要泄露！</p>\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYK5rVrxmRUf1ibzQR638JNlQibTrFMyk56ic6p3qg6aCicKD6l5XeCMKIv8edXQ3omDEtyCplkCWXcfeQ/640?wx_fmt=png&from=appmsg&randomid=4t4d3x7n&tp=webp&wxfrom=5&wx_lazy=1\" />\n\n<p>回到项目，在配置文件中添加大模型配置，指定模型名称和 API Key：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">langchain4j:</span></span><br><span class=\"line\">  <span class=\"attr\">community:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">chat-model:</span></span><br><span class=\"line\">        <span class=\"attr\">model-name:</span> <span class=\"string\">qwen-max</span></span><br><span class=\"line\">        <span class=\"attr\">api-key:</span> <span class=\"string\">&lt;You</span> <span class=\"string\">API</span> <span class=\"string\">Key</span> <span class=\"string\">here&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以按需选择模型名称，追求效果可以用 qwen-max，否则可以选择效果、速度、成本均衡的 qwen-plus。</p>\n<img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYK5rVrxmRUf1ibzQR638JNlQenuXgWvZOMQtpdquOdUJyyLASN2NkhUqk30Ozngn9SEmdUvFQxdbRg/640?wx_fmt=png&from=appmsg&randomid=8ac4s7h5&tp=webp&wxfrom=5&wx_lazy=1\" />\n\n<p>除了编写配置让 Spring Boot 自动构建 ChatModel 外，也可以通过构造器自己创建 ChatModel 对象。这种方式更灵活，在 LangChain4j 中我们会经常用到这种方式来构造对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ChatModel</span> <span class=\"variable\">qwenModel</span> <span class=\"operator\">=</span> QwenChatModel.builder()</span><br><span class=\"line\">    .apiKey(<span class=\"string\">&quot;You API key here&quot;</span>)</span><br><span class=\"line\">    .modelName(<span class=\"string\">&quot;qwen-max&quot;</span>)</span><br><span class=\"line\">    .enableSearch(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    .temperature(<span class=\"number\">0.7</span>)</span><br><span class=\"line\">    .maxTokens(<span class=\"number\">4096</span>)</span><br><span class=\"line\">    .stops(List.of(<span class=\"string\">&quot;Hello&quot;</span>))</span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure>\n\n<p>有了 ChatModel 后，创建一个 AiCodeHelper 类，引入自动注入的 qwenChatModel，编写简单的对话代码，并利用 Lombok 注解打印输出结果日志：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AiCodeHelper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel qwenChatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UserMessage</span> <span class=\"variable\">userMessage</span> <span class=\"operator\">=</span> UserMessage.from(message);</span><br><span class=\"line\">        <span class=\"type\">ChatResponse</span> <span class=\"variable\">chatResponse</span> <span class=\"operator\">=</span> qwenChatModel.chat(userMessage);</span><br><span class=\"line\">        <span class=\"type\">AiMessage</span> <span class=\"variable\">aiMessage</span> <span class=\"operator\">=</span> chatResponse.aiMessage();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AI 输出：&quot;</span> + aiMessage.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> aiMessage.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写单元测试，向 AI 打个招呼吧：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AiCodeHelperTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AiCodeHelper aiCodeHelper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">chat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        aiCodeHelper.chat(<span class=\"string\">&quot;你好，我是程序员鱼皮&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以 Debug 模式运行单元测试，成功运行并查看输出：</p>\n<!-- 省略后续内容，继续按上述格式处理全文 --> ",
            "tags": [
                "AI",
                "Java",
                "LangChain4j",
                "实战教程"
            ]
        }
    ]
}
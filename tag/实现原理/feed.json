{
    "version": "https://jsonfeed.org/version/1",
    "title": "杰克飞的博客 • All posts by \"实现原理\" tag",
    "description": "一个用Hexo搭建的个人博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/07/19/ArrayList%E5%BA%95%E5%B1%82%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "url": "http://example.com/2025/07/19/ArrayList%E5%BA%95%E5%B1%82%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "title": "ArrayList底层的实现原理是什么？",
            "date_published": "2025-07-19T08:55:58.136Z",
            "content_html": "<p>摘要：<br>ArrayList底层是动态数组，支持自动扩容和高效随机访问。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br>ArrayList底层是一个<strong>动态数组</strong>，<strong>初始容量是0</strong>，<strong>当第一次添加数据</strong>才会初始化容量为10，<strong>扩容</strong>是原来容量的1.5倍，每次扩容都需要<strong>拷贝数组</strong>。</p>\n<p>添加数据时：</p>\n<ul>\n<li>判断元素个数size+1后是否大于总容量，如果大于就调用grow方法扩容，把旧数组拷贝到扩容后的新数组中，再把新元素放在size位置上，返回true。</li>\n</ul>\n<p><strong>ArrayList list&#x3D;new ArrayList(10)中的list扩容几次?</strong><br>声明和实例了一个ArrayList，指定了容量为10，未扩容。构造方法中传参initCapcity,是多少就初始化多少容量。</p>\n<p><strong>如何实现数组和List之间的转换？</strong></p>\n<ul>\n<li>数组转List:           <strong>Arrays工具类的asList方法</strong></li>\n<li>List转数组，使用<strong>List的toArray方法</strong>。无参toArray方法返回 Object数组，传入初始化长度的数组对象，返回该对象数组。</li>\n</ul>\n<p>面试官再问：</p>\n<ol>\n<li>用Arrays.asList转List后，如果修改了数组内容，list受影响吗？</li>\n<li>List用toArray转数组后，如果修改了List内容，数组受影响吗？</li>\n</ol>\n<p><strong>数组转List受影响</strong>，因为它的<strong>底层使用的Arrays类中的一个内部类ArrayList来构造的集合</strong>，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，<strong>最终指向的都是同一个内存地址</strong>。</p>\n<p><strong>List转数组不受影响</strong>，在底层是它是进行了数组的拷贝。</p>\n",
            "tags": [
                "ArrayList",
                "实现原理"
            ]
        },
        {
            "id": "http://example.com/2025/07/19/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9F/",
            "url": "http://example.com/2025/07/19/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9F/",
            "title": "HashMap实现原理？",
            "date_published": "2025-07-19T08:55:15.936Z",
            "content_html": "<p>摘要：<br>HashMap底层是哈希表数据结构，Java8之前是数组+链表，之后是数组+链表+红黑树。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br>HashMap底层是哈希表数据结构，Java8之前，是数组+链表。之后是数组+链表+红黑树。</p>\n<p>存储元素时，利用key的hashCode重新hash计算出元素在数组中的下标，如果两个key出现了相同的hash值（哈希冲突）：</p>\n<ul>\n<li>如果key相同，覆盖原值。</li>\n<li>key不同，把key-value放入链表或红黑树中，链表的长度大于8并且数组长度大于64时链表转成红黑树。扩容resize时，红黑树的结点≤6就退化成链表。</li>\n</ul>\n<p>获取元素时，直接找到hash值对应下标，再判断key是否相同来找到值。</p>\n<p>源码：初始容量16，加载因子0.75，扩容&#x3D;之积。懒加载，不初始化容量。</p>\n",
            "tags": [
                "HashMap",
                "实现原理"
            ]
        }
    ]
}
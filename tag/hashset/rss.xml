<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>杰克飞的博客 • Posts by &#34;hashset&#34; tag</title>
        <link>http://example.com</link>
        <description>一个用Hexo搭建的个人博客</description>
        <language>zh-CN</language>
        <pubDate>Sat, 19 Jul 2025 16:55:48 +0800</pubDate>
        <lastBuildDate>Sat, 19 Jul 2025 16:55:48 +0800</lastBuildDate>
        <category>HashMap</category>
        <category>put方法</category>
        <category>ArrayList</category>
        <category>实现原理</category>
        <category>Hexo</category>
        <category>博客</category>
        <category>线程安全</category>
        <category>AI</category>
        <category>Java</category>
        <category>LangChain4j</category>
        <category>实战教程</category>
        <category>扩容</category>
        <category>HashSet</category>
        <category>HashTable</category>
        <item>
            <guid isPermalink="true">http://example.com/2025/07/19/HashSet%EF%BC%8CHashTable%E4%B8%8EHashMap%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
            <title>HashSet，HashTable与HashMap的区别</title>
            <link>http://example.com/2025/07/19/HashSet%EF%BC%8CHashTable%E4%B8%8EHashMap%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
            <category>HashMap</category>
            <category>HashSet</category>
            <category>HashTable</category>
            <pubDate>Sat, 19 Jul 2025 16:55:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;摘要：&lt;br&gt;对比HashSet、HashMap、HashTable三者的底层结构、线程安全性、常用方法及应用场景。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;正文：&lt;br&gt;数据结构上HashSet底层是一个HashMap，只存储键不存储值；HashMap是一个哈希表，由数组+链表+红黑树组成，存储键值对。HashSet不能重复，只允许一个null元素，实现了Set接口；HashMap键只有一个null值，值可以有多个，实现Map接口，它们性能一致。&lt;/p&gt;
&lt;p&gt;常用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HashSet：add, remove, contains, size&lt;/li&gt;
&lt;li&gt;HashMap: put(), get(), remove(), containsKey(), size()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HashTable 是 Java 早期的线程安全哈希表实现，因同步开销大、设计局限性（如不支持 null、扩容效率低），已逐渐被淘汰。HashMap 作为更现代的实现，性能更优、功能更灵活，而多线程场景下推荐使用 ConcurrentHashMap（分段锁优化，性能远超 HashTable）。&lt;/p&gt;
&lt;p&gt;你能自己设计实现一个 HashMap 吗？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，实现一个 hash 函数，对键的 hashCode 进行扰动&lt;/li&gt;
&lt;li&gt;第二步，实现一个拉链法的方法来解决哈希冲突&lt;/li&gt;
&lt;li&gt;第三步，扩容后，重新计算哈希值，将元素放到新的数组中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讲讲 LinkedHashMap 怎么实现有序的？&lt;br&gt;在 HashMap 的基础上维护了一个双向链表，通过 before 和 after 标识前置节点和后置节点。从而实现插入和访问有序。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>

{
    "version": "https://jsonfeed.org/version/1",
    "title": "杰克飞的博客",
    "description": "一个用Hexo搭建的个人博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/07/19/ArrayList%E5%BA%95%E5%B1%82%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "url": "http://example.com/2025/07/19/ArrayList%E5%BA%95%E5%B1%82%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "title": "ArrayList底层的实现原理是什么？",
            "date_published": "2025-07-19T08:55:58.136Z",
            "content_html": "<p>摘要：<br>ArrayList底层是动态数组，支持自动扩容和高效随机访问。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br>ArrayList底层是一个<strong>动态数组</strong>，<strong>初始容量是0</strong>，<strong>当第一次添加数据</strong>才会初始化容量为10，<strong>扩容</strong>是原来容量的1.5倍，每次扩容都需要<strong>拷贝数组</strong>。</p>\n<p>添加数据时：</p>\n<ul>\n<li>判断元素个数size+1后是否大于总容量，如果大于就调用grow方法扩容，把旧数组拷贝到扩容后的新数组中，再把新元素放在size位置上，返回true。</li>\n</ul>\n<p><strong>ArrayList list&#x3D;new ArrayList(10)中的list扩容几次?</strong><br>声明和实例了一个ArrayList，指定了容量为10，未扩容。构造方法中传参initCapcity,是多少就初始化多少容量。</p>\n<p><strong>如何实现数组和List之间的转换？</strong></p>\n<ul>\n<li>数组转List:           <strong>Arrays工具类的asList方法</strong></li>\n<li>List转数组，使用<strong>List的toArray方法</strong>。无参toArray方法返回 Object数组，传入初始化长度的数组对象，返回该对象数组。</li>\n</ul>\n<p>面试官再问：</p>\n<ol>\n<li>用Arrays.asList转List后，如果修改了数组内容，list受影响吗？</li>\n<li>List用toArray转数组后，如果修改了List内容，数组受影响吗？</li>\n</ol>\n<p><strong>数组转List受影响</strong>，因为它的<strong>底层使用的Arrays类中的一个内部类ArrayList来构造的集合</strong>，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，<strong>最终指向的都是同一个内存地址</strong>。</p>\n<p><strong>List转数组不受影响</strong>，在底层是它是进行了数组的拷贝。</p>\n",
            "tags": [
                "实现原理",
                "ArrayList"
            ]
        },
        {
            "id": "http://example.com/2025/07/19/HashSet%EF%BC%8CHashTable%E4%B8%8EHashMap%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "http://example.com/2025/07/19/HashSet%EF%BC%8CHashTable%E4%B8%8EHashMap%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "HashSet，HashTable与HashMap的区别",
            "date_published": "2025-07-19T08:55:48.002Z",
            "content_html": "<p>摘要：<br>对比HashSet、HashMap、HashTable三者的底层结构、线程安全性、常用方法及应用场景。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br>数据结构上HashSet底层是一个HashMap，只存储键不存储值；HashMap是一个哈希表，由数组+链表+红黑树组成，存储键值对。HashSet不能重复，只允许一个null元素，实现了Set接口；HashMap键只有一个null值，值可以有多个，实现Map接口，它们性能一致。</p>\n<p>常用方法：</p>\n<ul>\n<li>HashSet：add, remove, contains, size</li>\n<li>HashMap: put(), get(), remove(), containsKey(), size()</li>\n</ul>\n<p>HashTable 是 Java 早期的线程安全哈希表实现，因同步开销大、设计局限性（如不支持 null、扩容效率低），已逐渐被淘汰。HashMap 作为更现代的实现，性能更优、功能更灵活，而多线程场景下推荐使用 ConcurrentHashMap（分段锁优化，性能远超 HashTable）。</p>\n<p>你能自己设计实现一个 HashMap 吗？</p>\n<ul>\n<li>第一步，实现一个 hash 函数，对键的 hashCode 进行扰动</li>\n<li>第二步，实现一个拉链法的方法来解决哈希冲突</li>\n<li>第三步，扩容后，重新计算哈希值，将元素放到新的数组中</li>\n</ul>\n<p>讲讲 LinkedHashMap 怎么实现有序的？<br>在 HashMap 的基础上维护了一个双向链表，通过 before 和 after 标识前置节点和后置节点。从而实现插入和访问有序。</p>\n",
            "tags": [
                "HashMap",
                "HashSet",
                "HashTable"
            ]
        },
        {
            "id": "http://example.com/2025/07/19/HashMap-%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97%EF%BC%9F/",
            "url": "http://example.com/2025/07/19/HashMap-%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97%EF%BC%9F/",
            "title": "HashMap 是线程安全的吗？",
            "date_published": "2025-07-19T08:55:34.536Z",
            "content_html": "<p>摘要：<br>HashMap 不是线程安全的，多线程环境下可能出现死循环、数据丢失等问题。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br>HashMap 不是线程安全的。</p>\n<ol>\n<li><p>JDK7 中的 HashMap 使用的是<strong>头插法</strong>来处理链表，在<strong>多线程环境下扩容会出现环形链表，造成死循环</strong>。JDK 8 时通过<strong>尾插法修复</strong>了这个问题，扩容时会保持链表原来的顺序。</p>\n</li>\n<li><p>多线程在进行 <strong>put 元素</strong>的时候，<strong>可能会导致元素丢失</strong>。因为put操作<strong>不是原子的</strong>。当多个线程同时检查到 “槽位为空” 或 “键不存在” 时，可能都决定写入，这样就可能导致元素<strong>先插入的元素被覆盖而丢失</strong>。</p>\n</li>\n<li><p>put 和 get 并发时，可能导致 get 为 null。线程 1 执行 put 时，因为元<strong>素个数超出阈值而扩容</strong>，线程 2 此时执行 get 就可能获取不到元素。线程 1 执行完 table &#x3D; newTab 之后，线程 2 中的 table 已经发生了改变，线程 2 去 get 索引元素可能就 get 不到了。</p>\n</li>\n</ol>\n",
            "tags": [
                "HashMap",
                "线程安全"
            ]
        },
        {
            "id": "http://example.com/2025/07/19/HashMap%E7%9A%84put%E6%96%B9%E6%B3%95%E7%9A%84%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%EF%BC%9F/",
            "url": "http://example.com/2025/07/19/HashMap%E7%9A%84put%E6%96%B9%E6%B3%95%E7%9A%84%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%EF%BC%9F/",
            "title": "HashMap的put方法的具体流程？",
            "date_published": "2025-07-19T08:55:24.937Z",
            "content_html": "<p>摘要：<br>详细解析HashMap的put方法执行流程，包括哈希计算、索引定位、冲突处理、链表与红黑树转换等。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br><strong>第一步：检查数组是否为空</strong><br>首次<code>put</code>时，调用<code>resize()</code>初始化数组，默认容量为16，负载因子为0.75。</p>\n<p><strong>第二步：计算键的哈希值</strong><br>具体是将键的hashCode异或hashCode右移16位的值。这是为了减少哈希冲突，让元素分布更均匀。</p>\n<p><strong>第三步：根据键的哈希值计算数组索引</strong><br>具体是将键的哈希值与上数组长度-1（等价于哈希值模数组长度，因为与运算的效率更高，所以用与运算代替模运算，但前提是数组长度是2的N次幂）。</p>\n<p><strong>第四步：检查数组索引对应槽位的情况</strong><br>如果为空，直接插入；如果不为空，用equals判断对应位置键是否已经存在，存在则更新值。如果对应位置是红黑树，插入树结点。是链表就遍历链表逐个用equals检查键是否存在，存在则更新值，遍历完后发现不存在则插入链表尾部，如果链表长度≥8且数组长度≥64，链表转成红黑树。</p>\n<p><strong>只重写元素的equals方法没重写hashCode，put的时候会发生什么？</strong><br>如果只重写equals方法，没有重写hashCode方法，那么会导致equals相等的两个对象，hashCode不相等，这样的话，两个对象会被put到数组中不同的位置，导致get的时候，无法获取到正确的值。</p>\n",
            "tags": [
                "HashMap",
                "put方法"
            ]
        },
        {
            "id": "http://example.com/2025/07/19/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9F/",
            "url": "http://example.com/2025/07/19/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%9F/",
            "title": "HashMap实现原理？",
            "date_published": "2025-07-19T08:55:15.936Z",
            "content_html": "<p>摘要：<br>HashMap底层是哈希表数据结构，Java8之前是数组+链表，之后是数组+链表+红黑树。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br>HashMap底层是哈希表数据结构，Java8之前，是数组+链表。之后是数组+链表+红黑树。</p>\n<p>存储元素时，利用key的hashCode重新hash计算出元素在数组中的下标，如果两个key出现了相同的hash值（哈希冲突）：</p>\n<ul>\n<li>如果key相同，覆盖原值。</li>\n<li>key不同，把key-value放入链表或红黑树中，链表的长度大于8并且数组长度大于64时链表转成红黑树。扩容resize时，红黑树的结点≤6就退化成链表。</li>\n</ul>\n<p>获取元素时，直接找到hash值对应下标，再判断key是否相同来找到值。</p>\n<p>源码：初始容量16，加载因子0.75，扩容&#x3D;之积。懒加载，不初始化容量。</p>\n",
            "tags": [
                "HashMap",
                "实现原理"
            ]
        },
        {
            "id": "http://example.com/2025/07/19/%E8%AE%B2%E4%B8%80%E8%AE%B2HashMap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/",
            "url": "http://example.com/2025/07/19/%E8%AE%B2%E4%B8%80%E8%AE%B2HashMap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/",
            "title": "讲一讲HashMap的扩容机制",
            "date_published": "2025-07-19T08:28:05.350Z",
            "content_html": "<p>摘要：<br>HashMap 在元素个数超过阈值时会触发扩容（resize）操作，这个阈值是数组容量 * 负载因子。扩容的过程包括新数组创建和元素迁移。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br>当哈希表中元素个数超过阈值时会触发扩容 resize 方法，这个阈值是 数组容量 * 负载因子，数组容量初始是16，负载因子默认是0.75。</p>\n<p>扩容时：</p>\n<ol>\n<li><strong>创建一个新数组</strong>，容量为旧数组的2倍，具体是将旧容量左移1位得到新容量。</li>\n<li><strong>迁移元素</strong>，遍历旧数组的每个槽位，重新计算索引后放到新数组。如果槽位是单个节点，通过 <code>e.hash &amp; (newCap新容量 - 1)</code> 计算新索引；如果是红黑树节点，拆分处理。如果是链表节点，将链表拆分为<strong>低位链</strong>和<strong>高位链</strong>，避免重新哈希带来性能损耗。如果 <code>e.hash &amp; oldCap == 0</code>（元素哈希值与上旧容量等于0）就是低位链，索引不变。如果不为0，就是高位链，索引变成 旧索引 + 旧容量。</li>\n</ol>\n<p>通过这种方式，HashMap 能够高效地完成扩容和数据迁移，保证查询和插入的性能。</p>\n",
            "tags": [
                "HashMap",
                "扩容"
            ]
        },
        {
            "id": "http://example.com/2025/07/18/hello-world/",
            "url": "http://example.com/2025/07/18/hello-world/",
            "title": "你好，世界",
            "date_published": "2025-07-18T09:26:05.873Z",
            "content_html": "<p>摘要：<br>欢迎使用 Hexo！这是你的第一篇博客文章。</p>\n<span id=\"more\"></span>\n\n<p>正文：<br>你好，欢迎来到我的个人博客！</p>\n<p>这是我用 Hexo 搭建的第一个博客页面。你可以在这里记录生活、学习、技术心得等内容。</p>\n<p>如果你遇到任何问题，可以查阅 Hexo 官方文档，或者在评论区留言交流。</p>\n<p>祝你写作愉快！</p>\n",
            "tags": [
                "Hexo",
                "博客"
            ]
        }
    ]
}